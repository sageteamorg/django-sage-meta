# Generated by Django 5.0.7 on 2024-07-30 13:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AccountInsight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "account_insight_id",
                    models.CharField(
                        db_comment="Primary key for the account insight",
                        help_text="Unique identifier for the account insight",
                        max_length=255,
                        unique=True,
                        verbose_name="Account Insight ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The name of the account insight",
                        help_text="Name of the account insight",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "period",
                    models.CharField(
                        db_comment="The period covered by the account insight",
                        help_text="Period of the account insight",
                        max_length=255,
                        verbose_name="Period",
                    ),
                ),
                (
                    "values",
                    models.JSONField(
                        blank=True,
                        db_comment="The data values associated with the account insight",
                        default=list,
                        help_text="List of values for the account insight",
                        verbose_name="Values",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        db_comment="The title or headline of the account insight",
                        default="",
                        help_text="Title of the account insight",
                        max_length=255,
                        verbose_name="Title",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        db_comment="A detailed description of the account insight",
                        default="",
                        help_text="Description of the account insight",
                        max_length=255,
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "category_id",
                    models.CharField(
                        db_comment="Primary key for the category",
                        help_text="Unique identifier for the category",
                        max_length=255,
                        unique=True,
                        verbose_name="Category ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The name of the category",
                        help_text="Name of the category",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "comment_id",
                    models.CharField(
                        db_comment="Primary key for the comment",
                        help_text="Unique identifier for the comment",
                        max_length=255,
                        unique=True,
                        verbose_name="Comment ID",
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True,
                        db_comment="The content of the comment",
                        help_text="Text of the comment",
                        null=True,
                        verbose_name="Text",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        db_comment="The username of the person who made the comment",
                        help_text="Username of the commenter",
                        max_length=255,
                        null=True,
                        verbose_name="Username",
                    ),
                ),
                (
                    "like_count",
                    models.IntegerField(
                        blank=True,
                        db_comment="The total number of likes the comment has received",
                        help_text="Number of likes on the comment",
                        null=True,
                        verbose_name="Like Count",
                    ),
                ),
                (
                    "timestamp",
                    models.CharField(
                        blank=True,
                        db_comment="Timestamp indicating when the comment was made",
                        help_text="Timestamp of the comment",
                        max_length=255,
                        null=True,
                        verbose_name="Timestamp",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Insight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "insight_id",
                    models.CharField(
                        db_comment="Primary key for the insight",
                        help_text="Unique identifier for the insight",
                        max_length=255,
                        unique=True,
                        verbose_name="Insight ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The name of the insight",
                        help_text="Name of the insight",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "period",
                    models.CharField(
                        db_comment="The period covered by the insight",
                        help_text="Period of the insight",
                        max_length=255,
                        verbose_name="Period",
                    ),
                ),
                (
                    "values",
                    models.JSONField(
                        blank=True,
                        db_comment="The data values associated with the insight",
                        default=list,
                        help_text="List of values for the insight",
                        verbose_name="Values",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        db_comment="The title or headline of the insight",
                        help_text="Title of the insight",
                        max_length=255,
                        null=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        db_comment="A detailed description of the insight",
                        help_text="Description of the insight",
                        max_length=255,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Settings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "access_token",
                    models.CharField(
                        db_comment="The access token used for authenticating API requests",
                        help_text="Access token for the API",
                        max_length=255,
                        verbose_name="Access Token",
                    ),
                ),
                (
                    "business_account_id",
                    models.CharField(
                        db_comment="The unique identifier for the business account",
                        help_text="ID of the business account",
                        max_length=255,
                        verbose_name="Business Account ID",
                    ),
                ),
                (
                    "user_id",
                    models.CharField(
                        db_comment="The unique identifier for the user",
                        help_text="ID of the user",
                        max_length=255,
                        verbose_name="User ID",
                    ),
                ),
                (
                    "messenger_token",
                    models.CharField(
                        db_comment="The token used for accessing the Messenger API",
                        help_text="Token for Messenger API access",
                        max_length=255,
                        verbose_name="Messenger Token",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Story",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "story_id",
                    models.CharField(
                        db_comment="Primary key for the story",
                        help_text="Unique identifier for the story",
                        max_length=255,
                        unique=True,
                        verbose_name="Story ID",
                    ),
                ),
                (
                    "media_type",
                    models.CharField(
                        blank=True,
                        db_comment="The media type of the story (e.g., image, video)",
                        help_text="Type of media content in the story",
                        max_length=255,
                        null=True,
                        verbose_name="Media Type",
                    ),
                ),
                (
                    "media_url",
                    models.CharField(
                        blank=True,
                        db_comment="The URL where the media is stored",
                        help_text="URL of the media content",
                        max_length=255,
                        null=True,
                        verbose_name="Media URL",
                    ),
                ),
                (
                    "timestamp",
                    models.CharField(
                        blank=True,
                        db_comment="Timestamp indicating when the story was created",
                        help_text="When the story was created",
                        max_length=255,
                        null=True,
                        verbose_name="Timestamp",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InstagramAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "account_id",
                    models.CharField(
                        db_comment="Primary key for the Instagram account",
                        help_text="Unique identifier for the account",
                        max_length=255,
                        unique=True,
                        verbose_name="Account ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_comment="The handle or username of the Instagram account",
                        help_text="Username of the account",
                        max_length=255,
                        verbose_name="Username",
                    ),
                ),
                (
                    "follows_count",
                    models.IntegerField(
                        db_comment="The total number of accounts followed by this Instagram account",
                        help_text="Number of accounts this account follows",
                        verbose_name="Follows Count",
                    ),
                ),
                (
                    "followers_count",
                    models.IntegerField(
                        db_comment="The total number of followers of this Instagram account",
                        help_text="Number of followers of this account",
                        verbose_name="Followers Count",
                    ),
                ),
                (
                    "media_count",
                    models.IntegerField(
                        db_comment="The total number of media items posted by this Instagram account",
                        help_text="Number of media items posted by this account",
                        verbose_name="Media Count",
                    ),
                ),
                (
                    "profile_picture_url",
                    models.CharField(
                        blank=True,
                        db_comment="The URL of the profile picture of the Instagram account",
                        help_text="URL of the profile picture",
                        max_length=255,
                        null=True,
                        verbose_name="Profile Picture URL",
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True,
                        db_comment="The website linked in the Instagram account",
                        help_text="Website associated with the account",
                        max_length=255,
                        null=True,
                        verbose_name="Website",
                    ),
                ),
                (
                    "biography",
                    models.TextField(
                        blank=True,
                        db_comment="The biography or bio of the Instagram account",
                        help_text="Biography of the account",
                        null=True,
                        verbose_name="Biography",
                    ),
                ),
                (
                    "insights",
                    models.ManyToManyField(
                        blank=True,
                        db_comment="Insights related to the Instagram account",
                        help_text="List of insights for this account",
                        related_name="instagram_accounts",
                        to="django_sage_meta.insight",
                        verbose_name="Insights",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FacebookPageData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "page_id",
                    models.CharField(
                        db_comment="Primary key for the Facebook page",
                        help_text="Unique identifier for the Facebook page",
                        max_length=255,
                        unique=True,
                        verbose_name="Page ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The name of the Facebook page",
                        help_text="Name of the Facebook page",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        db_comment="The category to which the Facebook page belongs",
                        help_text="Category of the Facebook page",
                        max_length=255,
                        verbose_name="Category",
                    ),
                ),
                (
                    "access_token",
                    models.CharField(
                        db_comment="The token used to access the Facebook page API",
                        help_text="Access token for the Facebook page",
                        max_length=255,
                        verbose_name="Access Token",
                    ),
                ),
                (
                    "tasks",
                    models.JSONField(
                        blank=True,
                        db_comment="Tasks that can be performed on the Facebook page",
                        default=list,
                        help_text="List of tasks for the Facebook page",
                        verbose_name="Tasks",
                    ),
                ),
                (
                    "categories",
                    models.ForeignKey(
                        blank=True,
                        db_comment="Categories associated with the Facebook page",
                        help_text="List of categories for the Facebook page",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facebook_pages",
                        to="django_sage_meta.category",
                        verbose_name="Category List",
                    ),
                ),
                (
                    "instagram_business_account",
                    models.OneToOneField(
                        blank=True,
                        db_comment="The Instagram business account linked to this Facebook page",
                        help_text="Instagram business account associated with the Facebook page",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="facebook_page",
                        to="django_sage_meta.instagramaccount",
                        verbose_name="Instagram Business Account",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "media_id",
                    models.CharField(
                        db_comment="Primary key for the media",
                        help_text="Unique identifier for the media",
                        max_length=255,
                        unique=True,
                        verbose_name="Media ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_comment="The handle or username of the Instagram account",
                        help_text="Username of the account",
                        max_length=255,
                        verbose_name="Username",
                    ),
                ),
                (
                    "caption",
                    models.TextField(
                        blank=True,
                        db_comment="The caption or description of the media content",
                        help_text="Caption for the media",
                        null=True,
                        verbose_name="Caption",
                    ),
                ),
                (
                    "media_type",
                    models.CharField(
                        blank=True,
                        db_comment="The format or type of the media content",
                        help_text="Type of media (e.g., image, video)",
                        max_length=255,
                        null=True,
                        verbose_name="Media Type",
                    ),
                ),
                (
                    "media_url",
                    models.JSONField(
                        blank=True,
                        db_comment="List of URLs where the media files are stored",
                        default=list,
                        help_text="URLs for the media content",
                        verbose_name="Media URLs",
                    ),
                ),
                (
                    "timestamp",
                    models.CharField(
                        blank=True,
                        db_comment="Timestamp indicating when the media content was created or published",
                        help_text="When the media was created or published",
                        max_length=255,
                        null=True,
                        verbose_name="Timestamp",
                    ),
                ),
                (
                    "like_count",
                    models.IntegerField(
                        blank=True,
                        db_comment="The total number of likes the media has received",
                        help_text="Number of likes on the media",
                        null=True,
                        verbose_name="Like Count",
                    ),
                ),
                (
                    "comments_count",
                    models.IntegerField(
                        blank=True,
                        db_comment="The total number of comments on the media",
                        help_text="Number of comments on the media",
                        null=True,
                        verbose_name="Comments Count",
                    ),
                ),
                (
                    "comments",
                    models.ManyToManyField(
                        blank=True,
                        db_comment="Comments related to the media content",
                        help_text="List of comments on the media",
                        related_name="media_comments",
                        to="django_sage_meta.comment",
                        verbose_name="Comments",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="instagramaccount",
            name="media",
            field=models.ManyToManyField(
                blank=True,
                db_comment="Media items posted by this Instagram account",
                help_text="List of media items posted by this account",
                related_name="instagram_accounts",
                to="django_sage_meta.media",
                verbose_name="Media",
            ),
        ),
        migrations.AddField(
            model_name="instagramaccount",
            name="stories",
            field=models.ManyToManyField(
                blank=True,
                db_comment="Stories posted by this Instagram account",
                help_text="List of stories posted by this account",
                related_name="instagram_accounts",
                to="django_sage_meta.story",
                verbose_name="Stories",
            ),
        ),
        migrations.CreateModel(
            name="UserData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        db_comment="Any extra information that is not captured by other fields.",
                        default=dict,
                        help_text="Any extra information that is not captured by other fields.",
                        verbose_name="Additional Data",
                    ),
                ),
                (
                    "user_id",
                    models.CharField(
                        db_comment="Primary key for the user",
                        help_text="Unique identifier for the user",
                        max_length=255,
                        unique=True,
                        verbose_name="User ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The full name of the user",
                        help_text="Name of the user",
                        max_length=255,
                        verbose_name="Name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        db_comment="The email address of the user",
                        help_text="Email of the user",
                        max_length=254,
                        null=True,
                        verbose_name="Email",
                    ),
                ),
                (
                    "pages",
                    models.OneToOneField(
                        blank=True,
                        db_comment="Facebook pages linked to this user",
                        help_text="List of Facebook pages associated with the user",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="django_sage_meta.facebookpagedata",
                        verbose_name="Pages",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
